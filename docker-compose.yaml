services:
  mongo:
    image: mongo
    container_name: mongo-db
    ports:
      - "27017:27017"
    networks:
      - aye-network
    volumes:
      - mongo-data:/data/db

  # users için Postgre container kaldır
  users-pg-db:
    image: postgres:16
    container_name: nest-users-pg-db
    restart: always
    ports:
      - "${USERS_POSTGRES_PORT_CONTAINER}:${USERS_POSTGRES_PORT}"
    environment:
      POSTGRES_USER: ${USERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USERS_POSTGRES_DB}
      POSTGRES_PORT: ${USERS_POSTGRES_PORT}
    volumes:
      - users-pg-data:/var/lib/postgresql/data
    networks:
      - aye-network

  users-microservice:
    build:
      context: .
      dockerfile: ./users-microservice/Dockerfile
    env_file:
      - .env
    depends_on:
      - users-pg-db
    networks:
      - aye-network

  products-pg-db:
    image: postgres:16
    container_name: nest-products-pg-db
    restart: always
    ports:
      - "${PRODUCTS_POSTGRES_PORT_CONTAINER}:${PRODUCTS_POSTGRES_PORT}"
    environment:
      POSTGRES_USER: ${PRODUCTS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCTS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PRODUCTS_POSTGRES_DB}
      POSTGRES_PORT: ${PRODUCTS_POSTGRES_PORT}
    volumes:
      - products-pg-data:/var/lib/postgresql/data
    networks:
      - aye-network

  products-microservice:
    build:
      context: .
      dockerfile: ./products-microservice/Dockerfile
    env_file:
      - .env
    depends_on:
      - products-pg-db
    networks:
      - aye-network

  orders-pg-db:
    image: postgres:16
    container_name: nest-orders-pg-db
    restart: always
    ports:
      - "${ORDERS_POSTGRES_PORT_CONTAINER}:${ORDERS_POSTGRES_PORT}"
    environment:
      POSTGRES_USER: ${ORDERS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDERS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ORDERS_POSTGRES_DB}
      POSTGRES_PORT: ${ORDERS_POSTGRES_PORT}
    volumes:
      - orders-pg-data:/var/lib/postgresql/data
    networks:
      - aye-network

  orders-microservice:
    build:
      context: .
      dockerfile: ./orders-microservice/Dockerfile
    env_file:
      - .env
    depends_on:
      - orders-pg-db
    networks:
      - aye-network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - aye-network

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - aye-network

  auth-microservice:
    build:
      context: .
      dockerfile: ./auth-microservice/Dockerfile
    env_file:
      - .env
    depends_on:
      - users-microservice
    networks:
      - aye-network

  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    env_file:
      - .env
    ports:
      - "3000:3000"
    networks:
      - aye-network
    depends_on:
      - users-microservice
      - auth-microservice
      - products-microservice
      - orders-microservice

  # pgadmin
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    restart: unless-stopped
    networks:
      - aye-network

networks:
  aye-network:
    driver: bridge

volumes:
  users-pg-data:
  products-pg-data:
  orders-pg-data:
  mongo-data:
  pgadmin:
